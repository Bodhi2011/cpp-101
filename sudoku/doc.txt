Sudoku Solver Documentation
This documentation provides an overview of the Sudoku solver code.

Grid Class (grid.hpp, grid.cpp)
The grid class represents a Sudoku grid and provides methods to access and modify the grid cells.

int get(int row, int col) const
This method returns the value at the specified row and col coordinates in the grid.

void place(int row, int col, int val)
This method places the specified val at the given row and col coordinates in the grid.

Sudoku Class (sudoku.hpp, sudoku.cpp)
The Sudoku class represents a Sudoku game and provides methods to generate, solve, and validate Sudoku puzzles.

Sudoku()
This is the constructor for the Sudoku class. It initializes the Sudoku board.

void generate_board()
This method generates a new Sudoku board. It uses a base and side variable to determine the size of the Sudoku grid. It generates random sequences of numbers to populate the grid, following the Sudoku rules.

void make_playable(int num_blanks)
This method makes the generated Sudoku board playable by removing a specified number of blanks. It shuffles the indices of the cells and sets them to zero, effectively removing the numbers from those cells.

bool solve()
This method solves the Sudoku puzzle using a backtracking algorithm. It finds the first empty cell and tries placing numbers from 1 to 9 in that cell. If a number is valid, it recursively continues solving the puzzle. If a number doesn't lead to a solution, it backtracks and tries the next number. It returns true if a solution is found and false if no solution is possible.

bool validMove(int val, int row, int col) const
This method checks if a move is valid by verifying that the val is not already present in the same row, column, or 3x3 square of the given cell.

std::optional<std::pair<int, int>> findEmptyCell() const
This method finds the first empty cell in the Sudoku grid and returns its coordinates as an std::optional<std::pair<int, int>>. If no empty cell is found, it returns std::nullopt.

bool is_valid() const
This method checks if the current Sudoku board configuration is valid by calling the validRows(), validCols(), and validSquares() helper methods. It returns true if the board is valid and false otherwise.

grid getBoard() const
This method returns the Sudoku grid.

Helper Methods
The Sudoku class also includes several helper methods:

bool validRows() const: Checks if all rows in the Sudoku grid are valid (no duplicate values).
bool validCols() const: Checks if all columns in the Sudoku grid are valid (no duplicate values).
bool validSquares() const: Checks if all 3x3 squares in the Sudoku grid are valid (no duplicate values).
bool validUnit(const std::vector<int>& unit) const: Checks if a unit (row, column, or square) is valid (no duplicate values).
std::vector<int> shuffle(const std::vector<int>& v): Shuffles the elements of a vector using the Fisher-Yates algorithm.
int pattern(int r, int c, int base): Returns a pattern number based on the row, column, and base values.
std::vector<int> generateSequence(std::vector<int> const &base): Generates a sequence based on a base vector, shuffling the elements to create a random order.
Conclusion
The provided code implements a Sudoku solver that can generate and solve Sudoku puzzles. The grid class represents the Sudoku grid, while the Sudoku class provides methods to generate, solve, and validate Sudoku puzzles. The solver uses a backtracking algorithm to find the solution.
